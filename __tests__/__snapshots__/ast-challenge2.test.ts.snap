// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`create returns correct AST node 1`] = `
"export interface UsePoolsQuery<TData> extends ReactQueryParams<QueryPoolsResponse, TData> {
  request?: QueryPoolsRequest;
}

const usePools = <TData = QueryPoolsResponse,>({
  request,
  options
}): UseQueryResult<TData> => {
  return useQuery([\\"PoolsQuery\\", request], () => {
    if (!queryService) throw new Error(\\"Query Service not initialized\\");
    return queryService.pools(request);
  }, options);
};

export interface UseNumPoolsQuery<TData> extends ReactQueryParams<QueryNumPoolsResponse, TData> {
  request?: QueryNumPoolsRequest;
}

const useNumPools = <TData = QueryNumPoolsResponse,>({
  request,
  options
}): UseQueryResult<TData> => {
  return useQuery([\\"NumPoolsQuery\\", request], () => {
    if (!queryService) throw new Error(\\"Query Service not initialized\\");
    return queryService.numpools(request);
  }, options);
};

export interface UseTotalLiquidityQuery<TData> extends ReactQueryParams<QueryTotalLiquidityResponse, TData> {
  request?: QueryTotalLiquidityRequest;
}

const useTotalLiquidity = <TData = QueryTotalLiquidityResponse,>({
  request,
  options
}): UseQueryResult<TData> => {
  return useQuery([\\"TotalLiquidityQuery\\", request], () => {
    if (!queryService) throw new Error(\\"Query Service not initialized\\");
    return queryService.totalliquidity(request);
  }, options);
};

export interface UsePoolQuery<TData> extends ReactQueryParams<QueryPoolResponse, TData> {
  request?: QueryPoolRequest;
}

const usePool = <TData = QueryPoolResponse,>({
  request,
  options
}): UseQueryResult<TData> => {
  return useQuery([\\"PoolQuery\\", request], () => {
    if (!queryService) throw new Error(\\"Query Service not initialized\\");
    return queryService.pool(request);
  }, options);
};

export interface UsePoolParamsQuery<TData> extends ReactQueryParams<QueryPoolParamsResponse, TData> {
  request?: QueryPoolParamsRequest;
}

const usePoolParams = <TData = QueryPoolParamsResponse,>({
  request,
  options
}): UseQueryResult<TData> => {
  return useQuery([\\"PoolParamsQuery\\", request], () => {
    if (!queryService) throw new Error(\\"Query Service not initialized\\");
    return queryService.poolparams(request);
  }, options);
};

export interface UseTotalPoolLiquidityQuery<TData> extends ReactQueryParams<QueryTotalPoolLiquidityResponse, TData> {
  request?: QueryTotalPoolLiquidityRequest;
}

const useTotalPoolLiquidity = <TData = QueryTotalPoolLiquidityResponse,>({
  request,
  options
}): UseQueryResult<TData> => {
  return useQuery([\\"TotalPoolLiquidityQuery\\", request], () => {
    if (!queryService) throw new Error(\\"Query Service not initialized\\");
    return queryService.totalpoolliquidity(request);
  }, options);
};

export interface UseTotalSharesQuery<TData> extends ReactQueryParams<QueryTotalSharesResponse, TData> {
  request?: QueryTotalSharesRequest;
}

const useTotalShares = <TData = QueryTotalSharesResponse,>({
  request,
  options
}): UseQueryResult<TData> => {
  return useQuery([\\"TotalSharesQuery\\", request], () => {
    if (!queryService) throw new Error(\\"Query Service not initialized\\");
    return queryService.totalshares(request);
  }, options);
};

export interface UseSpotPriceQuery<TData> extends ReactQueryParams<QuerySpotPriceResponse, TData> {
  request?: QuerySpotPriceRequest;
}

const useSpotPrice = <TData = QuerySpotPriceResponse,>({
  request,
  options
}): UseQueryResult<TData> => {
  return useQuery([\\"SpotPriceQuery\\", request], () => {
    if (!queryService) throw new Error(\\"Query Service not initialized\\");
    return queryService.spotprice(request);
  }, options);
};

export interface UseEstimateSwapExactAmountInQuery<TData> extends ReactQueryParams<QuerySwapExactAmountInResponse, TData> {
  request?: QuerySwapExactAmountInRequest;
}

const useEstimateSwapExactAmountIn = <TData = QuerySwapExactAmountInResponse,>({
  request,
  options
}): UseQueryResult<TData> => {
  return useQuery([\\"EstimateSwapExactAmountInQuery\\", request], () => {
    if (!queryService) throw new Error(\\"Query Service not initialized\\");
    return queryService.estimateswapexactamountin(request);
  }, options);
};

export interface UseEstimateSwapExactAmountOutQuery<TData> extends ReactQueryParams<QuerySwapExactAmountOutResponse, TData> {
  request?: QuerySwapExactAmountOutRequest;
}

const useEstimateSwapExactAmountOut = <TData = QuerySwapExactAmountOutResponse,>({
  request,
  options
}): UseQueryResult<TData> => {
  return useQuery([\\"EstimateSwapExactAmountOutQuery\\", request], () => {
    if (!queryService) throw new Error(\\"Query Service not initialized\\");
    return queryService.estimateswapexactamountout(request);
  }, options);
};"
`;
